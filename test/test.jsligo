#import "../src/main.jsligo" "Random"

const create_bytes = (payload: bytes, time_secret: nat): [bytes,bytes] =>
    [ Crypto.sha512(Bytes.pack([payload, time_secret])), payload ];

const test_one_complete_cycle = () : unit => {
    const alice: address = Test.nth_bootstrap_account(0);
    const bob: address = Test.nth_bootstrap_account(1);

    let init_seed : nat = 3268854739249n;
    let init_storage : Random.Storage.Types.t = {
        participants: Set.add(alice, (Set.add(bob, (Set.empty as set<address>)))),
        locked_tez:(Map.empty as map<address, tez>),
        secrets:(Map.empty as map<address, bytes>),
        decoded_payloads:(Map.empty as map<address, bytes>),
        result_nat:(None() as option<nat>),
        last_seed:init_seed,
        max:1000n,
        min:100n,
        metadata: (Big_map.empty as big_map<string, bytes>)
    };
    // originate Random smart contract
    const orig = Test.originate(contract_of(Random), init_storage, 0tez);
    let _s_init = Test.get_storage(orig.addr);
    //Test.log(s_init);

    let _test_full_cycle_commit_reveal_should_works = () : string => {

        let payload : bytes = 0x0a;
        let time_secret : nat = 10n;
        let [my_bytes,bytes_key] = create_bytes(payload, time_secret);

        let payload2 : bytes = 0x0b;
        let time_secret2 : nat = 99n;
        let [my_bytes2,bytes_key2] = create_bytes(payload2,time_secret2);

        //Test.log("bytess created");


        // alice commits
        //Test.log("alice commits");
        Test.set_source(alice);
        let commit_args : Random.Parameter.Types.commit_param = { secret_action:my_bytes };
        //Test.log(commit_args);
        Test.transfer_exn(orig.addr, (Commit(commit_args)), 10mutez);

        //Test.log("check alice bytes");
        let s : Random.storage = Test.get_storage(orig.addr);
        let response : bool = match (Map.find_opt(alice, s.secrets)) {
            when(None()): false;
            when(Some(_x)): true;
        };
        //Test.log(s);
        assert (response);


        // bob commits
        //Test.log("bob commits");
        Test.set_source(bob);
        let commit_args2 : Random.Parameter.Types.commit_param = { secret_action:my_bytes2 };
        //Test.log(commit_args);
        Test.transfer_exn(orig.addr, (Commit(commit_args2)), 10mutez);

        //Test.log("check bob bytes");
        let s3 : Random.storage = Test.get_storage(orig.addr);
        let response2 : bool = match (Map.find_opt(bob, s3.secrets)) {
            when(None()): false;
            when(Some(_x)): true;
        };
        //Test.log(s3);
        assert (response2);

        // alice reveals
        //Test.log("alice reveals");
        Test.set_source(alice);
        let reveal_args : Random.Parameter.Types.reveal_param = [bytes_key, time_secret];
        //Test.log(reveal_args);
        Test.transfer_exn(orig.addr, (Reveal(reveal_args)), 0mutez);

        // bob reveals
        // Test.log("bob reveals");
        Test.set_source(bob);
        let reveal_args2 : Random.Parameter.Types.reveal_param = [bytes_key2, time_secret2];
        Test.transfer_exn(orig.addr, (Reveal(reveal_args2)), 0mutez);

        //Test.log("check storage");
        let s2 : Random.storage = Test.get_storage(orig.addr);
        Test.log(s2.result_nat);
        assert (s2.result_nat != (None() as option<nat>));
        return "OK"
        //Test.log("test finished")
    };
    // execution
    const _test = _test_full_cycle_commit_reveal_should_works();
};

const test_roll_dices = () : unit => {
    const alice: address = Test.nth_bootstrap_account(0);
    const bob: address = Test.nth_bootstrap_account(1);
    let init_seed : nat = 3268854739249n;
    let init_storage : Random.Storage.Types.t = {
        participants: Set.add(alice, (Set.add(bob, (Set.empty as set<address>)))),
        locked_tez:(Map.empty as map<address, tez>),
        secrets:(Map.empty as map<address, bytes>),
        decoded_payloads:(Map.empty as map<address, bytes>),
        result_nat:(None() as option<nat>),
        last_seed:init_seed,
        max:1000n,
        min:1n,
        metadata: (Big_map.empty as big_map<string, bytes>)
    };
    // originate Random smart contract
    const orig = Test.originate(contract_of(Random), init_storage, 0tez);
    let _s_init = Test.get_storage(orig.addr);
    //Test.log(s_init);


    let _test_rollD1000 = () : string => {

        let payload : bytes = 0x0a1234;
        let time_secret : nat = 10n;
        let [my_bytes,bytes_key] = create_bytes(payload, time_secret);

        let payload2 : bytes = 0x0b455469;
        let time_secret2 : nat = 84n;
        let [my_bytes2,bytes_key2] = create_bytes(payload2, time_secret2);

        //Test.log("bytess created");


        // alice commits
        //Test.log("alice commits");
        Test.set_source(alice);
        let commit_args : Random.Parameter.Types.commit_param = {secret_action:my_bytes};
        Test.transfer_exn(orig.addr, (Commit(commit_args)), 10mutez);

        // bob commits
        //Test.log("bob commits");
        Test.set_source(bob);
        let commit_args2 : Random.Parameter.Types.commit_param = {secret_action:my_bytes2};
        Test.transfer_exn(orig.addr, (Commit(commit_args2)), 10mutez);

        // alice reveals
        //Test.log("alice reveals");
        Test.set_source(alice);
        let reveal_args : Random.Parameter.Types.reveal_param = [bytes_key, time_secret];
        Test.transfer_exn(orig.addr, (Reveal(reveal_args)), 0mutez);

        // bob reveals
        //Test.log("bob reveals");
        Test.set_source(bob);
        let reveal_args2 : Random.Parameter.Types.reveal_param = [bytes_key2, time_secret2];
        Test.transfer_exn(orig.addr, (Reveal(reveal_args2)), 0mutez);

        //Test.log("check storage");
        let s2 : Random.storage = Test.get_storage(orig.addr);
        Test.log(s2.result_nat);
        assert (s2.result_nat != (None() as option<nat>));
        return "OK"
        //Test.log("test finished")
    };
    let _test_rollD20 = () : string => {

        let payload : bytes = 0x0a1234;
        let time_secret : nat = 10n;
        let [my_bytes,bytes_key] = create_bytes(payload, time_secret);

        let payload2 : bytes = 0x0b455469;
        let time_secret2 : nat = 84n;
        let [my_bytes2,bytes_key2] = create_bytes(payload2, time_secret2);

        //Test.log("bytess created");


        // alice reset
        //Test.log("alice reset");
        Test.set_source(alice);
        let reset_args : Random.Parameter.Types.reset_param = {min:1n, max:20n};
        Test.transfer_exn(orig.addr, (Reset(reset_args)), 0mutez);

        //Test.log("check storage");
        //let store_reseted : Random.storage = Test.get_storage(orig.addr);
        //Test.log(store_reseted);

        // alice commits
        //Test.log("alice commits");
        Test.set_source(alice);
        let commit_args : Random.Parameter.Types.commit_param = {secret_action:my_bytes};
        Test.transfer_exn(orig.addr, (Commit(commit_args)), 10mutez);

        // bob commits
        //Test.log("bob commits");
        Test.set_source(bob);
        let commit_args2 : Random.Parameter.Types.commit_param = {secret_action:my_bytes2};
        Test.transfer_exn(orig.addr, (Commit(commit_args2)), 10mutez);

        // alice reveals
        //Test.log("alice reveals");
        Test.set_source(alice);
        let reveal_args : Random.Parameter.Types.reveal_param = [bytes_key, time_secret];
        Test.transfer_exn(orig.addr, (Reveal(reveal_args)), 0mutez);

        // bob reveals
        //Test.log("bob reveals");
        Test.set_source(bob);
        let reveal_args2 : Random.Parameter.Types.reveal_param = [bytes_key2, time_secret2];
        Test.transfer_exn(orig.addr, (Reveal(reveal_args2)), 0mutez);

        //Test.log("check storage");
        let s2 : Random.storage = Test.get_storage(orig.addr);
        Test.log(s2.result_nat);
        assert (s2.result_nat != (None() as option<nat>));
        let result : nat =Option.unopt(s2.result_nat);
        assert (result <= s2.max);
        assert (result >= s2.min);
        return "OK"
        //Test.log("test finished")
    };

    let _test_rollD20_again = () : string => {

        let payload : bytes = 0x0a1234;
        let time_secret : nat = 10n;
        let [my_bytes,bytes_key] = create_bytes(payload, time_secret);

        let payload2 : bytes = 0x0b455469;
        let time_secret2 : nat = 84n;
        let [my_bytes2,bytes_key2] = create_bytes(payload2, time_secret2);

        //Test.log("bytess created");


        // alice reset
        //Test.log("alice reset");
        Test.set_source(alice);
        let reset_args : Random.Parameter.Types.reset_param = {min:1n, max:20n};
        Test.transfer_exn(orig.addr, (Reset(reset_args)), 0mutez);

        //Test.log("check storage");
        //let store_reseted : Random.storage = Test.get_storage(orig.addr);
        //Test.log(store_reseted);


        // alice commits
        //Test.log("alice commits");
        Test.set_source(alice);
        let commit_args : Random.Parameter.Types.commit_param = {secret_action:my_bytes};
        Test.transfer_exn(orig.addr, (Commit(commit_args)), 10mutez);

        // bob commits
        //Test.log("bob commits");
        Test.set_source(bob);
        let commit_args2 : Random.Parameter.Types.commit_param = {secret_action:my_bytes2};
        Test.transfer_exn(orig.addr, (Commit(commit_args2)), 10mutez);

        // alice reveals
        //Test.log("alice reveals");
        Test.set_source(alice);
        let reveal_args : Random.Parameter.Types.reveal_param = [bytes_key, time_secret];
        Test.transfer_exn(orig.addr, (Reveal(reveal_args)), 0mutez);

        // bob reveals
        //Test.log("bob reveals");
        Test.set_source(bob);
        let reveal_args2 : Random.Parameter.Types.reveal_param = [bytes_key2, time_secret2];
        Test.transfer_exn(orig.addr, (Reveal(reveal_args2)), 0mutez);

        //Test.log("check storage");
        let s2 : Random.storage = Test.get_storage(orig.addr);
        Test.log(s2.result_nat);
        assert (s2.result_nat != (None() as option<nat>));
        let result : nat =Option.unopt(s2.result_nat);
        assert (result <= s2.max);
        assert (result >= s2.min);
        return "OK"
        //Test.log("test finished")
    };

    let _test_rollD20_again_again = () : string => {

        let payload : bytes = 0x0a1234;
        let time_secret : nat = 10n;
        let [my_bytes,bytes_key] = create_bytes(payload, time_secret);

        let payload2 : bytes = 0x0b455469;
        let time_secret2 : nat = 84n;
        let [my_bytes2,bytes_key2] = create_bytes(payload2, time_secret2);

        //Test.log("bytess created");


        // alice reset
        //Test.log("alice reset");
        Test.set_source(alice);
        let reset_args : Random.Parameter.Types.reset_param = {min:1n, max:20n};
        Test.transfer_exn(orig.addr, (Reset(reset_args)), 0mutez);

        //Test.log("check storage");
        //let store_reseted : Random.storage = Test.get_storage(orig.addr);
        //Test.log(store_reseted);

        // alice commits
        //Test.log("alice commits");
        Test.set_source(alice);
        let commit_args : Random.Parameter.Types.commit_param = {secret_action:my_bytes};
        Test.transfer_exn(orig.addr, (Commit(commit_args)), 10mutez);

        // bob commits
        //Test.log("bob commits");
        Test.set_source(bob);
        let commit_args2 : Random.Parameter.Types.commit_param = {secret_action:my_bytes2};
        Test.transfer_exn(orig.addr, (Commit(commit_args2)), 10mutez);

        // alice reveals
        //Test.log("alice reveals");
        Test.set_source(alice);
        let reveal_args : Random.Parameter.Types.reveal_param = [bytes_key, time_secret];
        Test.transfer_exn(orig.addr, (Reveal(reveal_args)), 0mutez);

        // bob reveals
        //Test.log("bob reveals");
        Test.set_source(bob);
        let reveal_args2 : Random.Parameter.Types.reveal_param = [bytes_key2, time_secret2];
        Test.transfer_exn(orig.addr, (Reveal(reveal_args2)), 0mutez);

        //Test.log("check storage");
        let s2 : Random.storage = Test.get_storage(orig.addr);
        Test.log(s2.result_nat);
        assert (s2.result_nat != (None() as option<nat>));
        let result : nat = Option.unopt(s2.result_nat);
        assert (result <= s2.max);
        assert (result >= s2.min);
        return "OK"
        //Test.log("test finished")
    };

    // execution
    const _test_dice_1 = _test_rollD1000();
    const _test_dice_2 = _test_rollD20();
    const _test_dice_3 = _test_rollD20_again();
    const _test_dice_4 = _test_rollD20_again_again();

};

const test_1 = test_one_complete_cycle();
const test_2 = test_roll_dices();
